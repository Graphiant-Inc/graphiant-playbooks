---
.gitlab-login:
  script:
    - echo "machine gitlab.com" > $HOME/.netrc
    - echo "  login gitlab-ci-token" >> $HOME/.netrc
    - echo "  password ${GITLAB_CICD_TOKEN}" >> $HOME/.netrc

.dind-vairables:
  variables:
    # Set the Docker host to connect to the dind instance
    DOCKER_HOST: "tcp://docker:2376"
    # Use TLS to talk to Docker daemon, enabled by default as of 19.03+
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

.docker-registry-login:
  script:
    - docker info
    # Only unprotected variables can be use in an unprotected branch:
    # https://github.com/JanMikes/gitlab-ci-push-to-gcr/issues/2#issue-552452892
    - echo -n $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    # docker login asks for the password to be passed through stdin for security
    # we use $CI_REGISTRY_PASSWORD here which is a special variable provided by GitLab
    # https://docs.gitlab.com/ce/ci/variables/predefined_variables.html
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

.image-info:
  script:
    - if [ -z "$IMAGE_REF" ]; then echo "IMAGE_REF is not set"; exit 1; fi
    - if [ -z "$CI_REGISTRY_IMAGE" ]; then echo "CI_REGISTRY_IMAGE is not set"; exit 1; fi
    - if [ -z "$DOCKER_HUB_REGISTRY_IMAGE" ]; then echo "DOCKER_HUB_REGISTRY_IMAGE is not set"; exit 1; fi
    - echo "CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE"
    - echo "DOCKER_HUB_REGISTRY_IMAGE $DOCKER_HUB_REGISTRY_IMAGE"
    - echo "CI_COMMIT_SHA $CI_COMMIT_SHA"
    - echo "CI_COMMIT_REF_NAME $CI_COMMIT_REF_NAME"

.dind:
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  extends:
    - .dind-vairables
  before_script:
    - !reference [.gitlab-login, script]
    - !reference [.docker-registry-login, script]

.docker:
  extends:
    - .dind
  before_script:
    - !reference [.dind, before_script]
    - !reference [.image-info, script]

variables:
  IMAGE_REF: graphiant-playbooks
  CI_REGISTRY_IMAGE: $CI_REGISTRY/products/oss/$IMAGE_REF
  DOCKER_HUB_REGISTRY_IMAGE: graphiant/$IMAGE_REF

docker-build:
  stage: build
  extends: .docker
  tags:
    - graphiant-default
  script:
    # Fetch the latest image (not failing if image is not found) before building a new one.
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - echo "Build docker image..."
    - >
      DOCKER_BUILDKIT=$BUILDKIT_ENABLED docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE:latest
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --build-arg COMMIT_SHA=$CI_COMMIT_SHA
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      --tag $DOCKER_HUB_REGISTRY_IMAGE:$CI_COMMIT_SHA
      --secret id=netrc,src=$HOME/.netrc
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $DOCKER_HUB_REGISTRY_IMAGE:$CI_COMMIT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ /^(feature|hotfix)\/.*/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

docker-publish:
  stage: publish
  extends: .docker
  variables:
    GIT_STRATEGY: none
  tags:
    - graphiant-default
  script:
    - >
      if [ -z "$DOCKER_IMAGE_TAG" ]; then
        echo "DOCKER_IMAGE_TAG is required and can't be empty"
        echo "Confirm the pipeline defintions are correct"
        exit 1
      fi
    - echo "DOCKER_IMAGE_TAG $DOCKER_IMAGE_TAG"
    # Because we have no guarantee that this job will be picked up by the same
    # runner that built the image in the previous step, we pull it again locally
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Publish to both CI registry
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
    # Publish to dockerhub for backup
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $DOCKER_HUB_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
    - docker push $DOCKER_HUB_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        DOCKER_IMAGE_TAG: latest
    - if: $CI_COMMIT_TAG
      variables:
        DOCKER_IMAGE_TAG: $CI_COMMIT_REF_SLUG
